generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                   @id @default(cuid())
  name                    String?
  email                   String?                  @unique
  emailVerified           DateTime?
  image                   String?
  onboardingCompletedAt   DateTime?
  onboardingStep          Int                      @default(1)
  selectedTools           String[]
  usageType               String?
  userRole                String?
  accounts                Account[]
  assignedActions         Action[]                 @relation("AssignedActions")
  actions                 Action[]
  actionAssignees         ActionAssignee[]         @relation("ActionAssignees")
  aiInteractionHistory    AiInteractionHistory[]
  feedback                Feedback[]
  goals                   Goal[]
  integrations            Integration[]
  permissionsGrantedBy    IntegrationPermission[]  @relation("PermissionGrantedBy")
  permissionsGrantedTo    IntegrationPermission[]  @relation("PermissionGrantedTo")
  permissionsRevokedBy    IntegrationPermission[]  @relation("PermissionRevokedBy")
  integrationMappings     IntegrationUserMapping[]
  notes                   Note[]
  notificationPreferences NotificationPreference?
  outcomes                Outcome[]
  posts                   Post[]
  projects                Project[]
  projectMemberships      ProjectMember[]
  scheduledNotifications  ScheduledNotification[]
  sessions                Session[]
  slackChannelsConfigured SlackChannelConfig[]
  slackMessageHistory     SlackMessageHistory[]
  slackRegistrations      SlackRegistrationToken[]
  teams                   TeamUser[]
  transcriptionSessions   TranscriptionSession[]
  exercises               UserExercise[]
  verificationTokens      VerificationToken[]
  whatsappConversations   WhatsAppConversation[]
  workflows               Workflow[]
  weeklyOutcomesCreated   WeeklyOutcome[]          @relation("WeeklyOutcomeCreated")
  weeklyOutcomeAssignees  WeeklyOutcomeAssignee[]  @relation("WeeklyOutcomeAssignee")
  teamCapacities          TeamMemberWeeklyCapacity[] @relation("TeamMemberCapacity")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
  @@index([userId])
}

model Action {
  id                     String                @id @default(cuid())
  name                   String
  description            String?
  dueDate                DateTime?
  status                 String                @default("ACTIVE")
  priority               String                @default("Quick")
  projectId              String?
  createdById            String
  assignedToId           String?
  teamId                 String?
  transcriptionSessionId String?
  kanbanStatus           ActionStatus?
  kanbanOrder            Int?
  completedAt            DateTime?
  assignedTo             User?                 @relation("AssignedActions", fields: [assignedToId], references: [id])
  createdBy              User                  @relation(fields: [createdById], references: [id])
  project                Project?              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team                   Team?                 @relation(fields: [teamId], references: [id])
  transcriptionSession   TranscriptionSession? @relation(fields: [transcriptionSessionId], references: [id])
  syncs                  ActionSync[]
  assignees              ActionAssignee[]
  weeklyOutcomes         WeeklyOutcome[]   @relation("WeeklyOutcomeActions")

  @@index([projectId])
  @@index([createdById])
  @@index([teamId])
  @@index([assignedToId])
  @@index([transcriptionSessionId])
  @@index([kanbanStatus])
}

model ActionAssignee {
  id       String @id @default(cuid())
  actionId String
  userId   String
  action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)
  user     User   @relation("ActionAssignees", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([actionId, userId])
  @@index([actionId])
  @@index([userId])
}

model Outcome {
  id          String    @id @default(cuid())
  description String
  dueDate     DateTime?
  userId      String?
  type        String?   @default("daily")
  projectId   String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Restrict)
  goals       Goal[]    @relation("GoalOutcomes")
  projects    Project[] @relation("ProjectOutcomes")

  @@index([userId])
  @@index([projectId])
}

model Project {
  id                    String                 @id @default(cuid())
  name                  String
  status                String                 @default("ACTIVE")
  priority              String                 @default("NONE")
  progress              Float                  @default(0)
  createdAt             DateTime               @default(now())
  reviewDate            DateTime?
  nextActionDate        DateTime?
  createdById           String
  slug                  String                 @unique
  description           String?
  teamId                String?
  taskManagementConfig  Json?
  taskManagementTool    String?                @default("internal")
  notionProjectId       String?
  actions               Action[]
  aiInteractionHistory  AiInteractionHistory[]
  createdBy             User                   @relation(fields: [createdById], references: [id])
  team                  Team?                  @relation(fields: [teamId], references: [id])
  projectMembers        ProjectMember[]
  slackConfig           SlackChannelConfig?
  transcriptionSessions TranscriptionSession[]
  workflows             Workflow[]
  goals                 Goal[]                 @relation("GoalProjects")
  outcomes              Outcome[]              @relation("ProjectOutcomes")
  weeklyOutcomes        WeeklyOutcome[]
  memberCapacities      TeamMemberWeeklyCapacity[] @relation("ProjectCapacities")

  @@index([name])
  @@index([status])
  @@index([priority])
  @@index([teamId])
  @@index([taskManagementTool])
}

model Video {
  id            String    @id @default(uuid())
  slug          String?   @unique
  title         String?
  videoUrl      String    @unique
  transcription String?
  status        String
  createdAt     DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  isSearchable  Boolean?  @default(false)
  description   String?
  summary       String?
}

model Week {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  days      Day[]
}

model Day {
  id        Int            @id @default(autoincrement())
  date      DateTime
  weekId    Int
  week      Week           @relation(fields: [weekId], references: [id])
  notes     Note[]
  exercises UserExercise[]

  @@index([weekId])
}

model Exercise {
  id            Int            @id @default(autoincrement())
  title         String
  description   String?
  userExercises UserExercise[]
}

model UserExercise {
  id         Int      @id @default(autoincrement())
  userId     String
  exerciseId Int
  dayId      Int
  day        Day      @relation(fields: [dayId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([exerciseId])
  @@index([dayId])
}

model Goal {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  dueDate      DateTime?
  lifeDomainId Int
  userId       String
  lifeDomain   LifeDomain @relation(fields: [lifeDomainId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  outcomes     Outcome[]  @relation("GoalOutcomes")
  projects     Project[]  @relation("GoalProjects")

  @@index([lifeDomainId])
  @@index([userId])
}

model LifeDomain {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  goals       Goal[]
}

model Note {
  id        Int      @id @default(autoincrement())
  content   String
  type      String
  title     String?
  dayId     Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  day       Day      @relation(fields: [dayId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([dayId])
  @@index([userId])
  @@index([type])
}

model ProjectMember {
  id               String   @id @default(cuid())
  name             String
  role             String
  responsibilities String[]
  avatarUrl        String?
  projectId        String
  userId           String
  project          Project  @relation(fields: [projectId], references: [id])
  user             User     @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model Team {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  description             String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  actions                 Action[]
  integrations            Integration[]
  integrationPermissions  IntegrationPermission[]
  projects                Project[]
  slackConfig             SlackChannelConfig?
  slackRegistrationTokens SlackRegistrationToken[]
  members                 TeamUser[]
  weeklyOutcomes          WeeklyOutcome[]
  memberCapacities        TeamMemberWeeklyCapacity[] @relation("TeamMemberCapacities")

  @@index([slug])
}

model TeamUser {
  id       String   @id @default(cuid())
  userId   String
  teamId   String
  role     String   @default("member")
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Differentiator {
  id          String   @id @default(cuid())
  value       String   @unique
  label       String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String   @default("")
}

model Audience {
  id          String   @id @default(cuid())
  value       String   @unique
  label       String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String   @default("")
}

model TranscriptionSession {
  id                  String       @id @default(cuid())
  sessionId           String       @unique
  transcription       String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  meetingDate         DateTime?    // Actual date/time when the meeting occurred
  userId              String?
  setupId             String?
  projectId           String?
  description         String?
  title               String?
  summary             String?
  processedAt         DateTime?
  slackNotificationAt DateTime?
  archivedAt          DateTime?
  sourceIntegrationId String?
  actions             Action[]
  screenshots         Screenshot[]
  project             Project?     @relation(fields: [projectId], references: [id])
  sourceIntegration   Integration? @relation(fields: [sourceIntegrationId], references: [id])
  user                User?        @relation(fields: [userId], references: [id])

  @@index([sessionId])
  @@index([userId])
  @@index([projectId])
  @@index([sourceIntegrationId])
}

model Screenshot {
  id                     String               @id @default(cuid())
  url                    String
  timestamp              String
  transcriptionSessionId String
  createdAt              DateTime             @default(now())
  transcriptionSession   TranscriptionSession @relation(fields: [transcriptionSessionId], references: [id])
}

model Integration {
  id                      String                   @id @default(cuid())
  name                    String
  type                    String
  provider                String
  status                  String                   @default("ACTIVE")
  description             String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  userId                  String?
  teamId                  String?
  lastSyncAt              DateTime?
  allowTeamMemberAccess   Boolean                  @default(false)
  team                    Team?                    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user                    User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentials             IntegrationCredential[]
  permissions             IntegrationPermission[]
  userMappings            IntegrationUserMapping[]
  notificationPreferences NotificationPreference[]
  scheduledNotifications  ScheduledNotification[]
  slackChannelConfigs     SlackChannelConfig[]
  slackRegistrationTokens SlackRegistrationToken[]
  transcriptionSessions   TranscriptionSession[]
  whatsappConfig          WhatsAppConfig?
  workflows               Workflow[]

  @@index([userId])
  @@index([teamId])
  @@index([provider])
}

model IntegrationCredential {
  id            String      @id @default(cuid())
  key           String
  keyType       String
  expiresAt     DateTime?
  isEncrypted   Boolean     @default(true)
  createdAt     DateTime    @default(now())
  integrationId String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
}

model IntegrationUserMapping {
  id             String      @id @default(cuid())
  integrationId  String
  externalUserId String
  userId         String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  integration    Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([integrationId, externalUserId])
  @@index([integrationId])
  @@index([userId])
  @@index([externalUserId])
}

model Workflow {
  id            String        @id @default(cuid())
  name          String
  type          String
  provider      String
  status        String        @default("ACTIVE")
  syncDirection String
  syncFrequency String
  config        Json
  integrationId String
  userId        String
  projectId     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lastRunAt     DateTime?
  integration   Integration   @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  project       Project?      @relation(fields: [projectId], references: [id])
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  runs          WorkflowRun[]

  @@index([userId])
  @@index([integrationId])
  @@index([status])
  @@index([provider])
}

model WorkflowRun {
  id             String    @id @default(cuid())
  workflowId     String
  status         String
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  itemsProcessed Int       @default(0)
  itemsCreated   Int       @default(0)
  itemsUpdated   Int       @default(0)
  itemsSkipped   Int       @default(0)
  errorMessage   String?
  metadata       Json?
  workflow       Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([status])
  @@index([startedAt])
}

model SlackChannelConfig {
  id                 String      @id @default(cuid())
  slackChannel       String
  isActive           Boolean     @default(true)
  projectId          String?     @unique
  teamId             String?     @unique
  integrationId      String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  configuredByUserId String
  configuredBy       User        @relation(fields: [configuredByUserId], references: [id], onDelete: Cascade)
  integration        Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  project            Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team               Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([teamId])
  @@index([integrationId])
  @@index([configuredByUserId])
}

model IntegrationPermission {
  id              String      @id @default(cuid())
  integrationId   String
  grantedToUserId String?
  grantedToTeamId String?
  grantedByUserId String
  permissions     String[]
  scope           String
  scopeEntityId   String?
  expiresAt       DateTime?
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  revokedAt       DateTime?
  revokedByUserId String?
  grantedBy       User        @relation("PermissionGrantedBy", fields: [grantedByUserId], references: [id], onDelete: Cascade)
  grantedToTeam   Team?       @relation(fields: [grantedToTeamId], references: [id], onDelete: Cascade)
  grantedToUser   User?       @relation("PermissionGrantedTo", fields: [grantedToUserId], references: [id], onDelete: Cascade)
  integration     Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  revokedBy       User?       @relation("PermissionRevokedBy", fields: [revokedByUserId], references: [id])

  @@index([integrationId])
  @@index([grantedToUserId])
  @@index([grantedToTeamId])
  @@index([grantedByUserId])
  @@index([scope, scopeEntityId])
}

model ActionSync {
  id         String   @id @default(cuid())
  actionId   String
  provider   String
  externalId String
  syncedAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String   @default("synced")
  action     Action   @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@unique([actionId, provider])
  @@index([provider, externalId])
  @@index([provider])
  @@index([actionId])
}

model SlackRegistrationToken {
  id            String      @id @default(cuid())
  token         String      @unique
  slackUserId   String
  integrationId String
  teamId        String?
  createdAt     DateTime    @default(now())
  expiresAt     DateTime
  usedAt        DateTime?
  usedByUserId  String?
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  team          Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  usedByUser    User?       @relation(fields: [usedByUserId], references: [id])

  @@index([token])
  @@index([slackUserId])
  @@index([integrationId])
  @@index([expiresAt])
}

model SlackEvent {
  id          String   @id @default(cuid())
  eventKey    String   @unique
  processedAt DateTime @default(now())

  @@index([eventKey])
  @@index([processedAt])
}

model SlackMessageHistory {
  id           String   @id @default(cuid())
  slackEventId String?
  channelId    String
  channelType  String
  timestamp    String
  slackUserId  String
  systemUserId String?
  userName     String?
  rawMessage   String
  cleanMessage String
  messageType  String?
  agentUsed    String?
  responseTime Int?
  hadError     Boolean  @default(false)
  errorMessage String?
  category     String?
  intent       String?
  createdAt    DateTime @default(now())
  user         User?    @relation(fields: [systemUserId], references: [id])

  @@index([slackUserId])
  @@index([systemUserId])
  @@index([category])
  @@index([intent])
  @@index([createdAt])
  @@index([channelType])
  @@index([messageType])
}

model AiInteractionHistory {
  id              String   @id @default(cuid())
  platform        String
  sourceId        String?
  systemUserId    String?
  externalUserId  String?
  userName        String?
  userMessage     String
  cleanMessage    String?
  aiResponse      String
  agentId         String?
  agentName       String?
  model           String?
  conversationId  String?
  messageType     String?
  intent          String?
  category        String?
  responseTime    Int?
  tokenUsage      Json?
  hadError        Boolean  @default(false)
  errorMessage    String?
  confidenceScore Float?
  projectId       String?
  actionsTaken    Json?
  toolsUsed       String[]
  userAgent       String?
  ipAddress       String?
  createdAt       DateTime @default(now())
  project         Project? @relation(fields: [projectId], references: [id])
  user            User?    @relation(fields: [systemUserId], references: [id])

  @@index([systemUserId])
  @@index([platform])
  @@index([agentId])
  @@index([conversationId])
  @@index([category])
  @@index([intent])
  @@index([projectId])
  @@index([createdAt])
  @@index([platform, systemUserId])
  @@index([conversationId, createdAt])
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String
  feature   String
  rating    Int
  content   String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([feature])
  @@index([createdAt])
  @@index([feature, rating])
}

model WhatsAppConfig {
  id                 String                       @id @default(cuid())
  phoneNumberId      String
  businessAccountId  String
  webhookVerifyToken String
  displayPhoneNumber String?
  businessName       String?
  integrationId      String                       @unique
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  integration        Integration                  @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  conversations      WhatsAppConversation[]
  messageAnalytics   WhatsAppMessageAnalytics[]
  performanceMetrics WhatsAppPerformanceMetrics[]
  rateLimitTracking  WhatsAppRateLimitTracking[]
  templates          WhatsAppTemplate[]
  webhookDeliveries  WhatsAppWebhookDelivery[]

  @@index([integrationId])
}

model WhatsAppTemplate {
  id                 String                  @id @default(cuid())
  name               String
  language           String
  status             String
  category           String
  headerType         String?
  headerText         String?
  bodyText           String
  footerText         String?
  buttons            Json?
  whatsappTemplateId String?
  rejectionReason    String?
  whatsappConfigId   String
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  whatsappConfig     WhatsAppConfig          @relation(fields: [whatsappConfigId], references: [id], onDelete: Cascade)
  usageMetrics       WhatsAppTemplateUsage[]

  @@unique([whatsappConfigId, name])
  @@index([whatsappConfigId])
  @@index([status])
}

model WhatsAppConversation {
  id               String         @id @default(cuid())
  phoneNumber      String
  userId           String?
  messages         Json
  lastMessageAt    DateTime       @default(now())
  messageCount     Int            @default(0)
  whatsappConfigId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User?          @relation(fields: [userId], references: [id])
  whatsappConfig   WhatsAppConfig @relation(fields: [whatsappConfigId], references: [id], onDelete: Cascade)

  @@unique([phoneNumber, whatsappConfigId])
  @@index([phoneNumber])
  @@index([userId])
  @@index([lastMessageAt])
}

model NotificationPreference {
  id                    String       @id @default(cuid())
  userId                String       @unique
  integrationId         String?
  taskReminders         Boolean      @default(true)
  projectUpdates        Boolean      @default(true)
  dailySummary          Boolean      @default(true)
  weeklySummary         Boolean      @default(false)
  timezone              String       @default("UTC")
  dailySummaryTime      String?      @default("09:00")
  weeklyDayOfWeek       Int?         @default(1)
  reminderMinutesBefore Int[]        @default([15, 60, 1440])
  quietHoursEnabled     Boolean      @default(false)
  quietHoursStart       String?
  quietHoursEnd         String?
  enabled               Boolean      @default(true)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  integration           Integration? @relation(fields: [integrationId], references: [id])
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([enabled])
}

model ScheduledNotification {
  id             String       @id @default(cuid())
  userId         String
  type           String
  status         String       @default("pending")
  scheduledFor   DateTime
  sentAt         DateTime?
  title          String
  message        String
  metadata       Json?
  integrationId  String?
  recipientPhone String?
  attempts       Int          @default(0)
  lastError      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  integration    Integration? @relation(fields: [integrationId], references: [id])
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([scheduledFor])
  @@index([status])
  @@index([type])
  @@index([userId, scheduledFor])
}

model WhatsAppTemplateUsage {
  id             String           @id @default(cuid())
  templateId     String
  usedAt         DateTime         @default(now())
  usedBy         String?
  recipientPhone String
  messageId      String?
  delivered      Boolean          @default(false)
  read           Boolean          @default(false)
  deliveredAt    DateTime?
  readAt         DateTime?
  variables      Json?
  status         String           @default("sent")
  errorMessage   String?
  createdAt      DateTime         @default(now())
  template       WhatsAppTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([usedAt])
  @@index([status])
}

model WhatsAppMessageAnalytics {
  id                    String         @id @default(cuid())
  whatsappConfigId      String
  date                  DateTime       @db.Date
  hour                  Int
  messagesReceived      Int            @default(0)
  messagesSent          Int            @default(0)
  messagesDelivered     Int            @default(0)
  messagesRead          Int            @default(0)
  messagesFailed        Int            @default(0)
  uniqueUsers           Int            @default(0)
  avgResponseTime       Float?
  maxResponseTime       Float?
  minResponseTime       Float?
  avgMessagesPerUser    Float?
  avgConversationLength Float?
  totalConversations    Int            @default(0)
  errorCount            Int            @default(0)
  errorRate             Float?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  whatsappConfig        WhatsAppConfig @relation(fields: [whatsappConfigId], references: [id], onDelete: Cascade)

  @@unique([whatsappConfigId, date, hour])
  @@index([whatsappConfigId, date])
  @@index([date])
}

model WhatsAppPerformanceMetrics {
  id                  String         @id @default(cuid())
  whatsappConfigId    String
  timestamp           DateTime       @default(now())
  apiCallsCount       Int            @default(0)
  apiSuccessCount     Int            @default(0)
  apiErrorCount       Int            @default(0)
  avgApiLatency       Float?
  maxApiLatency       Float?
  webhooksReceived    Int            @default(0)
  webhooksProcessed   Int            @default(0)
  webhooksFailed      Int            @default(0)
  avgWebhookLatency   Float?
  queueSize           Int            @default(0)
  queueBacklog        Int            @default(0)
  cacheHitRate        Float?
  circuitBreakerTrips Int            @default(0)
  memoryUsage         Float?
  cpuUsage            Float?
  whatsappConfig      WhatsAppConfig @relation(fields: [whatsappConfigId], references: [id], onDelete: Cascade)

  @@index([whatsappConfigId, timestamp])
  @@index([timestamp])
}

model WhatsAppRateLimitTracking {
  id                String         @id @default(cuid())
  whatsappConfigId  String
  endpoint          String
  limitType         String
  limitValue        Int
  currentUsage      Int            @default(0)
  remainingQuota    Int
  resetsAt          DateTime
  windowStart       DateTime
  warningThreshold  Float          @default(0.8)
  criticalThreshold Float          @default(0.95)
  lastAlertAt       DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  whatsappConfig    WhatsAppConfig @relation(fields: [whatsappConfigId], references: [id], onDelete: Cascade)

  @@unique([whatsappConfigId, endpoint, limitType])
  @@index([whatsappConfigId])
  @@index([resetsAt])
}

model WhatsAppWebhookDelivery {
  id               String         @id @default(cuid())
  whatsappConfigId String
  webhookId        String         @unique
  eventType        String
  payload          Json
  receivedAt       DateTime       @default(now())
  processedAt      DateTime?
  status           String         @default("pending")
  attempts         Int            @default(0)
  lastAttemptAt    DateTime?
  processingTime   Float?
  queueTime        Float?
  errorMessage     String?
  errorStack       String?
  whatsappConfig   WhatsAppConfig @relation(fields: [whatsappConfigId], references: [id], onDelete: Cascade)

  @@index([whatsappConfigId, status])
  @@index([receivedAt])
  @@index([webhookId])
}

enum ActionStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

// Team Weekly Planning Models
model WeeklyOutcome {
  id            String   @id @default(cuid())
  title         String
  description   String?
  weekStartDate DateTime // Start of the week (Monday)
  status        String   @default("NOT_STARTED") // NOT_STARTED, IN_PROGRESS, COMPLETED, BLOCKED
  priority      String   @default("MEDIUM") // HIGH, MEDIUM, LOW
  teamId        String
  projectId     String
  createdById   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  dueDate       DateTime? // Optional specific due date within the week
  
  // Relations
  team          Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy     User     @relation("WeeklyOutcomeCreated", fields: [createdById], references: [id])
  assignees     WeeklyOutcomeAssignee[]
  relatedActions Action[] @relation("WeeklyOutcomeActions")
  
  @@index([teamId])
  @@index([projectId])
  @@index([weekStartDate])
  @@index([status])
  @@unique([teamId, projectId, weekStartDate, title])
}

model WeeklyOutcomeAssignee {
  id              String        @id @default(cuid())
  weeklyOutcomeId String
  userId          String
  assignedAt      DateTime      @default(now())
  
  weeklyOutcome   WeeklyOutcome @relation(fields: [weeklyOutcomeId], references: [id], onDelete: Cascade)
  user            User          @relation("WeeklyOutcomeAssignee", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([weeklyOutcomeId, userId])
  @@index([weeklyOutcomeId])
  @@index([userId])
}

model TeamMemberWeeklyCapacity {
  id            String   @id @default(cuid())
  userId        String
  teamId        String
  projectId     String?  // Optional: project-specific capacity
  weekStartDate DateTime
  availableHours Float   @default(40) // Default full-time capacity
  notes         String?  // Vacation, part-time, etc.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation("TeamMemberCapacity", fields: [userId], references: [id])
  team          Team     @relation("TeamMemberCapacities", fields: [teamId], references: [id])
  project       Project? @relation("ProjectCapacities", fields: [projectId], references: [id])
  
  @@unique([userId, teamId, weekStartDate, projectId])
  @@index([userId])
  @@index([teamId])
  @@index([weekStartDate])
}
